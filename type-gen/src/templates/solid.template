import {JSX as SolidJSX } from "solid-js";
import "@nativescript-dom/core-types";
import { OmittedStyleObjectKeys } from "@nativescript-dom/core-types/attr-literals/index";
import "@nativescript-dom/core-types/event-maps/plain-event-maps";
import "@nativescript-dom/core-types/name-maps/pascal-cased";
import {
      AccessibilityLiveRegion,
      AccessibilityRole,
      AccessibilityState,
      ActionBar,
      ActionItems,
      Color,
      CoreTypes,
      CreateViewEventData,
      ImageSource,
      ItemEventData,
      ItemsSource,
      KeyedTemplate,
      LoadEventData,
      NavigationButton,
      TabViewItem,
      Template,
      View,
} from "@nativescript/core";
import {
      AlignContent,
      AlignItems,
      FlexDirection,
      FlexWrap,
      JustifyContent,
} from "@nativescript/core/ui/layouts/flexbox-layout";
import {
      SegmentedBarItem,
      SelectedIndexChangedEventData,
} from "@nativescript/core/ui/segmented-bar";
import {
      AccessibilityDecrementEventData,
      AccessibilityIncrementEventData,
} from "@nativescript/core/ui/slider";
import { CSSShadow } from "@nativescript/core/ui/styling/css-shadow";
import {
      FontStyleType,
      FontWeightType,
} from "@nativescript/core/ui/styling/font-interfaces";
import { LinearGradient } from "@nativescript/core/ui/styling/linear-gradient";

type ImageStretchType = CoreTypes.ImageStretchType;
type FontWeight = FontWeightType;
type FontStyle = FontStyleType;
type LengthDipUnit = CoreTypes.LengthDipUnit;
type LengthPercentUnit = CoreTypes.LengthPercentUnit;
type LengthPxUnit = CoreTypes.LengthPxUnit;
type LengthType = CoreTypes.LengthType;
type PercentLengthType = CoreTypes.PercentLengthType;
type BackgroundRepeatType = CoreTypes.BackgroundRepeatType;
type VerticalAlignmentType = CoreTypes.VerticalAlignmentType;
type HorizontalAlignmentType = CoreTypes.HorizontalAlignmentType;
type VisibilityType = CoreTypes.VisibilityType;
type TextTransformType = CoreTypes.TextTransformType;
type WhiteSpaceType = CoreTypes.WhiteSpaceType;
type TextDecorationType = CoreTypes.TextDecorationType;
type TextAlignmentType = CoreTypes.TextAlignmentType;

  // Converts camelCase to kebab-case
  type Kebab<
    T extends string,
    A extends string = ""
  > = T extends `${infer F}${infer R}`
    ? Kebab<R, `${A}${F extends Lowercase<F> ? "" : "-"}${Lowercase<F>}`>
    : A;
  type KebabKeys<T> = {
    [K in keyof T as K extends string ? Kebab<K> : K]: T[K];
  } & T;

  // Allows both kebab-case & camelCase keys in style object.
  type Style = Partial<
    KebabKeys<
      Omit<
        import("@nativescript/core").Style,
        | OmittedStyleObjectKeys
        | "width"
        | "height"
        | "background"
        | "backgroundColor"
        | "color"
      >
    > & {
      width?: string | number;
      height?: string | number;
      background?: string;
      backgroundColor?: string;
      "background-color": string;
      color?: string;
    }
  >;


<__CONTENT_HERE__>

// allow arbitrary props on all elements.
type JSXElementAttributes<T extends HTMLViewBaseElementAttributes> = Partial<T> & {
  [name:string]: any
};

interface CoreIntrinsicElements {
  <__ELEMENTS_HERE__>
}

export namespace JSX {
  export interface IntrinsicElements extends CoreIntrinsicElements {}

  export interface IntrinsicElements {
    // allow arbitrary native elements and props
    // @ts-ignore suppress ts:2374 = Duplicate string index signature.
    [name: string]: JSXElementAttributes<HTMLViewElementAttributes>
  }

  export function mapElementTag<K extends keyof IntrinsicElements>(
    tag: K
  ): IntrinsicElements[K];

  export function createElement<
    Element extends IntrinsicElements,
    Key extends keyof IntrinsicElements
  >(element: Key | undefined | null, attrs: Element[Key]): Element[Key];

  export function createElement<
    Element extends IntrinsicElements,
    Key extends keyof IntrinsicElements,
    T
  >(
    element: Key | undefined | null,
    attrsEnhancers: T,
    attrs: Element[Key] & T
  ): Element[Key];

  export type Element = SolidJSX.Element;
  export interface ArrayElement extends Array<Element> {}

  export interface FunctionElement {
    (): Element;
  }

  interface IntrinsicAttributes {
    ref?: unknown | ((e: unknown) => void);
  }

  export interface ElementClass {
    // empty, libs can define requirements downstream
  }
  export interface ElementAttributesProperty {
    // empty, libs can define requirements downstream
  }
  export interface ElementChildrenAttribute {
    children: {};
  }

  interface ArrayElement extends Array<Element> {}

  type Accessor<T> = () => T;

  interface CustomEvents {}
  interface CustomCaptureEvents {}
}

declare global {
  namespace JSX {
    export interface IntrinsicElements extends CoreIntrinsicElements {}
  
    export interface IntrinsicElements {
      // allow arbitrary elements
      // @ts-ignore suppress ts:2374 = Duplicate string index signature.
      [name: string]: any;
    }
  
    export function mapElementTag<K extends keyof IntrinsicElements>(
      tag: K
    ): IntrinsicElements[K];
  
    export function createElement<
      Element extends IntrinsicElements,
      Key extends keyof IntrinsicElements
    >(element: Key | undefined | null, attrs: Element[Key]): Element[Key];
  
    export function createElement<
      Element extends IntrinsicElements,
      Key extends keyof IntrinsicElements,
      T
    >(
      element: Key | undefined | null,
      attrsEnhancers: T,
      attrs: Element[Key] & T
    ): Element[Key];
  
    export type Element = SolidJSX.Element;
    export interface ArrayElement extends Array<Element> {}
  
    export interface FunctionElement {
      (): Element;
    }
  
    interface IntrinsicAttributes {
      ref?: unknown | ((e: unknown) => void);
    }
  
    export interface ElementClass {
      // empty, libs can define requirements downstream
    }
    export interface ElementAttributesProperty {
      // empty, libs can define requirements downstream
    }
    export interface ElementChildrenAttribute {
      children: {};
    }
  
    interface ArrayElement extends Array<Element> {}
  
    type Accessor<T> = () => T;
  
    interface CustomEvents {}
    interface CustomCaptureEvents {}
  }
}